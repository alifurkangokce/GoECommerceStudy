// Code generated by MockGen. DO NOT EDIT.
// Source: GoECommerceStudy/repository (interfaces: ProductImageRepository)

// Package repository is a generated GoMock package.
package repository

import (
	productImageDto "GoECommerceStudy/dto/productImageDto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockProductImageRepository is a mock of ProductImageRepository interface.
type MockProductImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductImageRepositoryMockRecorder
}

// MockProductImageRepositoryMockRecorder is the mock recorder for MockProductImageRepository.
type MockProductImageRepositoryMockRecorder struct {
	mock *MockProductImageRepository
}

// NewMockProductImageRepository creates a new mock instance.
func NewMockProductImageRepository(ctrl *gomock.Controller) *MockProductImageRepository {
	mock := &MockProductImageRepository{ctrl: ctrl}
	mock.recorder = &MockProductImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductImageRepository) EXPECT() *MockProductImageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductImageRepository) Delete(arg0, arg1 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductImageRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductImageRepository)(nil).Delete), arg0, arg1)
}

// Insert mocks base method.
func (m *MockProductImageRepository) Insert(arg0 productImageDto.ProductImageInsertDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProductImageRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductImageRepository)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockProductImageRepository) Update(arg0 primitive.ObjectID, arg1 productImageDto.ProductImageInsertDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductImageRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductImageRepository)(nil).Update), arg0, arg1)
}
